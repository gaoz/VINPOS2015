package com.vinpos.pos;

import com.vinpos.connection.PrintConn;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author jj
 */
public class CakeInfoPanel extends javax.swing.JDialog {

    /**
     * Creates new form CakeInfo
     */
    public CakeInfoPanel(java.awt.Frame parent, boolean modal, MyQuery myQ_) {
        super(parent, modal);
        initComponents();
        myQ= myQ_;
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 51, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Cake Information For Customer\n\n*********Round Cake************\n 8\" size  ---------$30 (10-12 ppl)\n10\" size  ---------$38 (12-16 ppl)\n12\" size  ---------$45 (16-20 ppl) \n14\" size  ---------$55 (20-24 ppl)\n16\" size  ---------$75 (40-50 ppl)\n\n*********Pyramid Cake**********\n 5\" size  ---------$25 ( 5-6  ppl)\n 7\" size  ---------$35 (12-14 ppl) \n8.5\"size  ---------$55 (20-24 ppl)\n10\" size  ---------$85 (30-36 ppl)\n12\" size  --------$145 (50-55 ppl)\n\n*********Sheet Cake************\n1/4 Sheet ----$38.00 (12-15 ppl)\n1/2 Sheet ----$75.00 (32-40 ppl)\nFullSheet ---$150.00 (64-80 ppl)\n\n*********Tart Cake*************\n 8\" size -------$30.00 ( 6-8  ppl)\n10\" size -------$38.00 ( 8-12 ppl)\n12\" size -------$45.00 (12-16 ppl)\n\n***Raspberry & BlueBerry Tart***\n 8\" size -------$38.00 ( 6-8  ppl)\n10\" size -------$46.00 ( 8-12 ppl)\n12\" size -------$53.00 (12-16 ppl)\n\n*********Fruit Basket**********\n 8\" size -------$38.00 ( 6-8  ppl)\n10\" size -------$46.00 ( 8-12 ppl)\n12\" size -------$53.00 (12-16 ppl)\n\n*****Now Available Cakes***** \n* Pyramid (5\" 7\" 8.5\")\n* Mango   (8\")               \n* Guava   (8\")\n* Lilikoi (8\")\n* Banana Haupia  (8\")\n* Le Cafe        (8\")\n* Red Velvet     (8\")\n* Double Chocolate Macaroon (8\")\n* Cheese cake   (8\")\n* Chocolate Raspberry Cake (8\")\n* Mocha Opera   (1/4,1/2 sheet)\n* Peanut Opera  (1/4,1/2 sheet)\n* Tiramisu      (1/4,1/2 sheet)");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 394, 930));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 90, 80));

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 120, 90, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 949, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        if(myQ.getJsonSimpleClassObject().isThisPrintServer){// if yes then local print
            String[] lines = jTextArea1.getText().split("\\n");
            s2.printForTheCakeInfor(lines);
        }else{
            PrintConn con = new PrintConn();
            con.createSocket();
            Socket pritnerSocket = con.giveMePrinterSocket();
            String[] lines = jTextArea1.getText().split("\\n");
            String text="";
            for(int i=0; i<lines.length; i++){
                text += lines[i]+"PPPPP";
            }

            try{
                System.out.println("Print Order initial");
                System.out.println("OrderString:"+text);
                System.out.println("test socket connection 1");
                DataOutputStream outToServer = new DataOutputStream(pritnerSocket.getOutputStream());
                System.out.println("test outToserver connection 2");
                outToServer.writeBytes("cakeinformationforprint123456789"+text+"\n");  // set out message
                System.out.println("test weiteByetes connection 3");
                System.out.println("Print Order Sent");

                BufferedReader inFromServer = new BufferedReader(new InputStreamReader(pritnerSocket.getInputStream()));
                System.out.println("SERVER Responds: " + inFromServer.readLine());
                inFromServer.close();
                con.closeSocket();

            }catch(Exception e){

                System.out.println("Table.sendPrintOrderToServer() Exception Occured - Break");
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private PrintForTheCakeInfor s2 = new PrintForTheCakeInfor();
    private MyQuery myQ;
}
